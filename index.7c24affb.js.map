{"mappings":"ACAA,IAAM,EAAQ,SAAS,aAAa,CAAC,UAC/B,EAAY,SAAS,aAAa,CAAC,eACnC,EAAe,SAAS,aAAa,CAAC,eACtC,EAAY,SAAS,aAAa,CAAC,kBACnC,EAAe,SAAS,aAAa,CAAC,kBAK5C,SAAS,IACP,IAAM,EAAW,EAAM,IAAI,CAAC,MAAM,CAC5B,EAAW,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,AAE3C,CAAA,EAAU,QAAQ,CAAG,GAPN,GAQf,EAAa,QAAQ,CAAG,GAPT,EAQf,EAAU,QAAQ,CAAG,GATN,GAUf,EAAa,QAAQ,CAAG,GATT,CAUjB,CA+CA,EAAU,gBAAgB,CAAC,QA7B3B,WACE,IAAM,EAAW,EAAM,IAAI,CAAC,MAAM,CAC5B,EAAW,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAE3C,GAAI,EAjCW,GAoCb,IAAK,IAFC,EAAS,EAAM,SAAS,GAErB,EAAI,EAAG,EAAI,EAAU,IAG5B,AAFgB,EAAO,UAAU,GAEzB,SAAS,CAAC,GAAG,CAAC,QAG1B,GACF,GAgBA,EAAa,gBAAgB,CAAC,QA9C9B,WACM,EAAM,IAAI,CAAC,MAAM,CAbN,GAcb,EAAM,SAAS,CAAC,IAElB,GACF,GA0CA,EAAU,gBAAgB,CAAC,QAf3B,WACE,IAAM,EAAW,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAGpC,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,EADP,GAAI,EAhDW,GAgDf,GAAA,CACE,IAAA,IAAK,EAAA,EAAa,EAAM,IAAI,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAGH,AAFgB,AADb,EAAA,KAAA,CACiB,UAAU,GAEtB,SAAS,CAAC,GAAG,CAAC,O,C,M,E,CAHnB,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAMP,GACF,GAKA,EAAa,gBAAgB,CAAC,QAzC9B,WAES,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,EADP,GAAI,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CApBf,EAoBf,GAAA,CACE,IAAA,IAAK,EAAA,EAAa,EAAM,IAAI,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACC,UAAU,CAAC,G,C,M,E,CADZ,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAIP,GACF,GAoCA","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["var table = document.querySelector(\".field\");\nvar addRowBtn = document.querySelector(\".append-row\");\nvar removeRowBtn = document.querySelector(\".remove-row\");\nvar addColBtn = document.querySelector(\".append-column\");\nvar removeColBtn = document.querySelector(\".remove-column\");\nvar maxLimit = 10;\nvar minLimit = 2;\nfunction updateButtonStates() {\n    var rowCount = table.rows.length;\n    var colCount = table.rows[0].cells.length;\n    addRowBtn.disabled = rowCount >= maxLimit;\n    removeRowBtn.disabled = rowCount <= minLimit;\n    addColBtn.disabled = colCount >= maxLimit;\n    removeColBtn.disabled = colCount <= minLimit;\n}\nfunction removeRow() {\n    if (table.rows.length > minLimit) table.deleteRow(-1);\n    updateButtonStates();\n}\nfunction removeColumn() {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    if (table.rows[0].cells.length > minLimit) try {\n        for(var _iterator = table.rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var row = _step.value;\n            row.deleteCell(-1);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    updateButtonStates();\n}\nfunction addRow() {\n    var rowCount = table.rows.length;\n    var colCount = table.rows[0].cells.length;\n    if (rowCount < maxLimit) {\n        var newRow = table.insertRow();\n        for(var i = 0; i < colCount; i++){\n            var newCell = newRow.insertCell();\n            newCell.classList.add(\"cell\");\n        }\n    }\n    updateButtonStates();\n}\nfunction addColumn() {\n    var colCount = table.rows[0].cells.length;\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    if (colCount < maxLimit) try {\n        for(var _iterator = table.rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var row = _step.value;\n            var newCell = row.insertCell();\n            newCell.classList.add(\"cell\");\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    updateButtonStates();\n}\naddRowBtn.addEventListener(\"click\", addRow);\nremoveRowBtn.addEventListener(\"click\", removeRow);\naddColBtn.addEventListener(\"click\", addColumn);\nremoveColBtn.addEventListener(\"click\", removeColumn);\nupdateButtonStates();\n\n//# sourceMappingURL=index.7c24affb.js.map\n","const table = document.querySelector('.field');\nconst addRowBtn = document.querySelector('.append-row');\nconst removeRowBtn = document.querySelector('.remove-row');\nconst addColBtn = document.querySelector('.append-column');\nconst removeColBtn = document.querySelector('.remove-column');\n\nconst maxLimit = 10;\nconst minLimit = 2;\n\nfunction updateButtonStates() {\n  const rowCount = table.rows.length;\n  const colCount = table.rows[0].cells.length;\n\n  addRowBtn.disabled = rowCount >= maxLimit;\n  removeRowBtn.disabled = rowCount <= minLimit;\n  addColBtn.disabled = colCount >= maxLimit;\n  removeColBtn.disabled = colCount <= minLimit;\n}\n\nfunction removeRow() {\n  if (table.rows.length > minLimit) {\n    table.deleteRow(-1);\n  }\n  updateButtonStates();\n}\n\nfunction removeColumn() {\n  if (table.rows[0].cells.length > minLimit) {\n    for (const row of table.rows) {\n      row.deleteCell(-1);\n    }\n  }\n  updateButtonStates();\n}\n\nfunction addRow() {\n  const rowCount = table.rows.length;\n  const colCount = table.rows[0].cells.length;\n\n  if (rowCount < maxLimit) {\n    const newRow = table.insertRow();\n\n    for (let i = 0; i < colCount; i++) {\n      const newCell = newRow.insertCell();\n\n      newCell.classList.add('cell');\n    }\n  }\n  updateButtonStates();\n}\n\nfunction addColumn() {\n  const colCount = table.rows[0].cells.length;\n\n  if (colCount < maxLimit) {\n    for (const row of table.rows) {\n      const newCell = row.insertCell();\n\n      newCell.classList.add('cell');\n    }\n  }\n  updateButtonStates();\n}\n\naddRowBtn.addEventListener('click', addRow);\nremoveRowBtn.addEventListener('click', removeRow);\naddColBtn.addEventListener('click', addColumn);\nremoveColBtn.addEventListener('click', removeColumn);\n\nupdateButtonStates();\n"],"names":["table","document","querySelector","addRowBtn","removeRowBtn","addColBtn","removeColBtn","updateButtonStates","rowCount","rows","length","colCount","cells","disabled","addEventListener","newRow","insertRow","i","newCell","insertCell","classList","add","deleteRow","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","err","return","deleteCell"],"version":3,"file":"index.7c24affb.js.map"}